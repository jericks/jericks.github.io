<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GeoScript on GeoScripting</title><link>https://jericks.github.io/tags/geoscript/</link><description>Recent content in GeoScript on GeoScripting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 05 Feb 2022 09:05:25 -0800</lastBuildDate><atom:link href="https://jericks.github.io/tags/geoscript/index.xml" rel="self" type="application/rss+xml"/><item><title>Using GeoScript to create a Geologic Map of Mars</title><link>https://jericks.github.io/posts/geoscript-mars/</link><pubDate>Sat, 05 Feb 2022 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-mars/</guid><description>&lt;p>I recently finished reading Kim Stanley Robinson&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/Mars_trilogy">Mars Triology&lt;/a>. There are a lot of great maps in those three books
and it inspired me to look around and see if I could find GIS data for Mars. I found the &lt;a href="https://astrogeology.usgs.gov/search/map/Mars/Geology/Mars15MGeologicGISRenovation">https://astrogeology.usgs.gov&lt;/a> web site which has awesome surficial geology maps and data of the red planet.&lt;/p></description></item><item><title>GeoScript Projections</title><link>https://jericks.github.io/posts/geoscript-world-proj/</link><pubDate>Fri, 28 Jan 2022 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-world-proj/</guid><description>&lt;p>&lt;a href="https://github.com/geoscript/geoscript-groovy">GeoScript Groovy&lt;/a> inherits a powerful projection system from the &lt;a href="https://github.com/geotools/geotools">GeoTools&lt;/a> project.&lt;br>
After reading a recent &lt;a href="https://view.e.economist.com/?qs=f23f9794d30266884e9b9ef47429adf7cbe494594408510df62ccb97d56fc2a8172e49360541c1702eb8910dbcfff4fcb812dcbb0226f7fa2cea98ed2a8f6647b777bcf700c1a030186049a60da896de">article&lt;/a> in the Economist about how they choose the right map project, I wanted to see how many of these various projection GeoTools and GeoScript supported.&lt;/p></description></item><item><title>GEOC: A command line interface for GeoTools</title><link>https://jericks.github.io/posts/geoc-cli/</link><pubDate>Sun, 11 Apr 2021 14:46:23 -0700</pubDate><guid>https://jericks.github.io/posts/geoc-cli/</guid><description>The GDAL and OGR libraries are written in C and C++ and have an awesome command line interface (CLI). It is used extensively by GIS analysts and developers.
On the Java side of the fence, GeoTools is an equivalent geospatial library. It contains code for reading and writing vector and raster datasets but it does not have a CLI.
The GEOC project is my attempt to give GeoTools a CLI. It is written in Groovy using GeoScript which wraps GeoTools in a scripting API.</description></item><item><title>Buffering Features with Groovy</title><link>https://jericks.github.io/posts/geoscript-buffer/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-buffer/</guid><description>&lt;p>In my last post, I calculated centroids from one shapefile and saved them to another using a GeoScript Groovy script. This time I buffer these centroids and save them to a polygon shapefile. Since GeoScript is based on the Java Topology Suite library you can take advantage of any of its geometry operations - intersection, union and difference.&lt;/p></description></item><item><title>Calculating Centroids with GeoScript Groovy</title><link>https://jericks.github.io/posts/geoscript-centroids/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-centroids/</guid><description>&lt;p>GeoScript uses the GeoTools and Java Topology Suite libraries to provide easy-to-use scripting APIs with implementations in Python, JavaScript, Scala and Groovy. The GeoScript web site provides simple code snippets in all four languages to help you get started. In this post, I address a real world example: calculating centroids from one GIS layer and saving them to another layer using Groovy. This example highlights the GeoScript Layer, Feature, and Geometry modules.&lt;/p></description></item><item><title>Calculating Convex Hull and Minimum Bounding Circle with Groovy</title><link>https://jericks.github.io/posts/geoscript-convexhull/</link><pubDate>Thu, 21 Jan 2021 16:26:56 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-convexhull/</guid><description>&lt;p>The Java Topology Suite, which Groovy GeoScript wraps, contains spatial operators that act on a group of Features or Geometries. In this post, I collect all geometries from a shapefile to calculate the convex hull and minimum bounding circle. This post builds on previous blog entries where I use GeoScript to extract centroids and buffer Features.&lt;/p></description></item></channel></rss>