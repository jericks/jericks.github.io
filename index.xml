<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GeoScripting</title><link>https://jericks.github.io/</link><description>Recent content on GeoScripting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Apr 2021 14:46:23 -0700</lastBuildDate><atom:link href="https://jericks.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>GEOC: A command line interface for GeoTools</title><link>https://jericks.github.io/posts/geoc-cli/</link><pubDate>Sun, 11 Apr 2021 14:46:23 -0700</pubDate><guid>https://jericks.github.io/posts/geoc-cli/</guid><description>The GDAL and OGR libraries are written in C and C++ and have an awesome command line interface (CLI). It is used extensively by GIS analysts and developers.
On the Java side of the fence, GeoTools is an equivalent geospatial library. It contains code for reading and writing vector and raster datasets but it does not have a CLI.
The GEOC project is my attempt to give GeoTools a CLI. It is written in Groovy using GeoScript which wraps GeoTools in a scripting API.</description></item><item><title>Using GEOS and C++ with Conan and CMAKE</title><link>https://jericks.github.io/posts/geos-conan/</link><pubDate>Thu, 25 Mar 2021 20:33:45 -0700</pubDate><guid>https://jericks.github.io/posts/geos-conan/</guid><description>&lt;p>One of the best ways to get started using the GEOS library with C++ is to use Conan and CMAKE.&lt;/p>
&lt;p>&lt;a href="https://trac.osgeo.org/geos">GEOS&lt;/a> is the Geometry Engine, Open Source library written in C and C++. Is is a port of the &lt;a href="https://github.com/locationtech/jts">Java Topology Suite&lt;/a> (JTS). Both libraries include spatial predicate functions and spatials operators. GEOS is used extensively in the PostGIS extension for Postgres.
&lt;a href="https://conan.io/">Conan&lt;/a> is a C/C++ package manager. It allows you to declare what libraries your code depends on.
Finally, &lt;a href="https://cmake.org/">CMake&lt;/a> is one of the most popular ways to build C++ applications.&lt;/p></description></item><item><title>Mapcubes</title><link>https://jericks.github.io/mapcubes/</link><pubDate>Sun, 24 Jan 2021 20:02:11 -0800</pubDate><guid>https://jericks.github.io/mapcubes/</guid><description>My daughters and I are avid star wars fans and we discovered cube craft paper models as a fun way to create toys.
I then discovered that you can do the same thing with maps. The cubed Gnomonic projection is perfect for creating simple map cubes that kids can easily print, cut out, and assemble with a glue stick. We started making our own map cubes using NASA&amp;rsquo;s G.Projector software but quickly moved to creating our own tool using GeoTools and GeoScript.</description></item><item><title>Presentations</title><link>https://jericks.github.io/presentations/</link><pubDate>Sun, 24 Jan 2021 20:02:11 -0800</pubDate><guid>https://jericks.github.io/presentations/</guid><description>GEOC: A GeoSpatial Command Line App https://jericks.github.io/geoc-pres/slides.html
GeoScript: The GeoSpatial Swiss Army Knife With Justin Deoliveira at FOSS4G in 2014
http://geoscript.github.io/foss4g2014-talk/#/
Map Cubes With Claire Erickson at CUGOS in 2014
https://www.slideshare.net/JaredErickson/map-cubes
Using GeoScript Groovy CUGOS in 2014
https://www.slideshare.net/JaredErickson/using-geoscript-groovy
Geoserver Shell CUGOS 2013
https://docs.google.com/file/d/0B8cwqNmbcThpd1I1Mjc4dGVmNUU/edit
Scripting GeoServer CUGS 2012
https://docs.google.com/file/d/0B8cwqNmbcThpNkRKT0VDc3V6Q0E/edit
Rendering Maps in GeoScript CUGOS 2012
https://www.slideshare.net/JaredErickson/geo-scriptstylerendering
Geometry Commands CUGOS 2012
https://www.slideshare.net/JaredErickson/geometry-commands
GeoScript: Spatial Capabilities for Scripting Languages With Justin Deolivera and Tim Schaub at FOSS4G in 2011</description></item><item><title>Buffering Features with Groovy</title><link>https://jericks.github.io/posts/geoscript-buffer/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-buffer/</guid><description>&lt;p>In my last post, I calculated centroids from one shapefile and saved them to another using a GeoScript Groovy script. This time I buffer these centroids and save them to a polygon shapefile. Since GeoScript is based on the Java Topology Suite library you can take advantage of any of its geometry operations - intersection, union and difference.&lt;/p></description></item><item><title>Calculating Centroids with GeoScript Groovy</title><link>https://jericks.github.io/posts/geoscript-centroids/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-centroids/</guid><description>&lt;p>GeoScript uses the GeoTools and Java Topology Suite libraries to provide easy-to-use scripting APIs with implementations in Python, JavaScript, Scala and Groovy. The GeoScript web site provides simple code snippets in all four languages to help you get started. In this post, I address a real world example: calculating centroids from one GIS layer and saving them to another layer using Groovy. This example highlights the GeoScript Layer, Feature, and Geometry modules.&lt;/p></description></item><item><title>Projects</title><link>https://jericks.github.io/projects/</link><pubDate>Sat, 23 Jan 2021 10:54:01 -0800</pubDate><guid>https://jericks.github.io/projects/</guid><description>GeoScript Groovy Github | Website | Cookbook
GeoScript Groovy is the Groovy implementation of GeoScript. GeoScript is a geospatial scripting API for the JVM that contains one API and four implementations (Python, JavaScript, Scala, and Groovy).
GeoScript is built on the shoulders of giants and essentially wraps the Java Topology Suite and the GeoTools libraries.
GeoScript provides several modules that includes geometry, projection, features, layers, workspaces, styling and rendering.
import geoscript.</description></item><item><title>About</title><link>https://jericks.github.io/about/</link><pubDate>Sat, 23 Jan 2021 10:53:53 -0800</pubDate><guid>https://jericks.github.io/about/</guid><description>I was born in North Dakota where I spent my childhood exploring the badlands. In college I majored in Archaeology and Classical Languages (Latin and Greek). During my summers, I was able to work as an archaeologist in North Dakota and Michigan after attending fields schools in Fargo and Greece. I continued my Archaeological education by attending graduate school at the University of Oregon where I studied Geoarchaeology and excavated a site on the Alaska Peninsula that led to my Master&amp;rsquo;s Thesis entitled &amp;ldquo;The Geoarchaeology of Nak-8&amp;rdquo;.</description></item><item><title>Calculating Convex Hull and Minimum Bounding Circle with Groovy</title><link>https://jericks.github.io/posts/geoscript-convexhull/</link><pubDate>Thu, 21 Jan 2021 16:26:56 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-convexhull/</guid><description>&lt;p>The Java Topology Suite, which Groovy GeoScript wraps, contains spatial operators that act on a group of Features or Geometries. In this post, I collect all geometries from a shapefile to calculate the convex hull and minimum bounding circle. This post builds on previous blog entries where I use GeoScript to extract centroids and buffer Features.&lt;/p></description></item></channel></rss>