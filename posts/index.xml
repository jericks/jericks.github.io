<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on GeoScripting</title><link>https://jericks.github.io/posts/</link><description>Recent content in Posts on GeoScripting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 25 Mar 2021 20:33:45 -0700</lastBuildDate><atom:link href="https://jericks.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Using GEOS and C++ with Conan and CMAKE</title><link>https://jericks.github.io/posts/geos-conan/</link><pubDate>Thu, 25 Mar 2021 20:33:45 -0700</pubDate><guid>https://jericks.github.io/posts/geos-conan/</guid><description>&lt;p>One of the best ways to get started using the GEOS library with C++ is to use Conan and CMAKE.&lt;/p>
&lt;p>&lt;a href="https://trac.osgeo.org/geos">GEOS&lt;/a> is the Geometry Engine, Open Source library written in C and C++. Is is a port of the &lt;a href="https://github.com/locationtech/jts">Java Topology Suite&lt;/a> (JTS). Both libraries include spatial predicate functions and spatials operators. GEOS is used extensively in the PostGIS extension for Postgres.
&lt;a href="https://conan.io/">Conan&lt;/a> is a C/C++ package manager. It allows you to declare what libraries your code depends on.
Finally, &lt;a href="https://cmake.org/">CMake&lt;/a> is one of the most popular ways to build C++ applications.&lt;/p></description></item><item><title>Buffering Features with Groovy</title><link>https://jericks.github.io/posts/geoscript-buffer/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-buffer/</guid><description>&lt;p>In my last post, I calculated centroids from one shapefile and saved them to another using a GeoScript Groovy script. This time I buffer these centroids and save them to a polygon shapefile. Since GeoScript is based on the Java Topology Suite library you can take advantage of any of its geometry operations - intersection, union and difference.&lt;/p></description></item><item><title>Calculating Centroids with GeoScript Groovy</title><link>https://jericks.github.io/posts/geoscript-centroids/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-centroids/</guid><description>&lt;p>GeoScript uses the GeoTools and Java Topology Suite libraries to provide easy-to-use scripting APIs with implementations in Python, JavaScript, Scala and Groovy. The GeoScript web site provides simple code snippets in all four languages to help you get started. In this post, I address a real world example: calculating centroids from one GIS layer and saving them to another layer using Groovy. This example highlights the GeoScript Layer, Feature, and Geometry modules.&lt;/p></description></item><item><title>Calculating Convex Hull and Minimum Bounding Circle with Groovy</title><link>https://jericks.github.io/posts/geoscript-convexhull/</link><pubDate>Thu, 21 Jan 2021 16:26:56 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-convexhull/</guid><description>&lt;p>The Java Topology Suite, which Groovy GeoScript wraps, contains spatial operators that act on a group of Features or Geometries. In this post, I collect all geometries from a shapefile to calculate the convex hull and minimum bounding circle. This post builds on previous blog entries where I use GeoScript to extract centroids and buffer Features.&lt;/p></description></item></channel></rss>