<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on GeoScripting</title><link>https://jericks.github.io/posts/</link><description>Recent content in Posts on GeoScripting</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Jan 2022 09:05:25 -0800</lastBuildDate><atom:link href="https://jericks.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>GeoScript Projections</title><link>https://jericks.github.io/posts/geoscript-world-proj/</link><pubDate>Fri, 28 Jan 2022 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-world-proj/</guid><description>&lt;p>&lt;a href="https://github.com/geoscript/geoscript-groovy">GeoScript Groovy&lt;/a> inherits a powerful projection system from the &lt;a href="https://github.com/geotools/geotools">GeoTools&lt;/a> project.&lt;br>
After reading a recent &lt;a href="https://view.e.economist.com/?qs=f23f9794d30266884e9b9ef47429adf7cbe494594408510df62ccb97d56fc2a8172e49360541c1702eb8910dbcfff4fcb812dcbb0226f7fa2cea98ed2a8f6647b777bcf700c1a030186049a60da896de">article&lt;/a> in the Economist about how they choose the right map project, I wanted to see how many of these various projection GeoTools and GeoScript supported.&lt;/p></description></item><item><title>GeoYaml support in geoc</title><link>https://jericks.github.io/posts/geoc-yaml/</link><pubDate>Mon, 17 Jan 2022 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoc-yaml/</guid><description>&lt;p>&lt;a href="https://github.com/louh/geoyaml">GeoYaml&lt;/a> is a new geospatial format inspired heavily by GeoJSON. The &lt;a href="https://github.com/jericks/geoc">geoc&lt;/a>
command line application inherited support from the &lt;a href="https://github.com/geoscript/geoscript-groovy">GeoScript Groovy&lt;/a> library.&lt;/p>
&lt;p>The &lt;strong>geoc geometry convert&lt;/strong> command can read and write geometries in numerous formats. With the addition of GeoYaml to GeoScript, you
can now convert WKT to GeoYaml.&lt;/p></description></item><item><title>Writing Geospatial scripts with Java and jbang</title><link>https://jericks.github.io/posts/jbang-jts/</link><pubDate>Tue, 23 Nov 2021 11:23:23 -0800</pubDate><guid>https://jericks.github.io/posts/jbang-jts/</guid><description>&lt;p>Usually writing a Java application requires using Maven or Gradle. While
both are great tools for large projects, they are too complicated for
small scripts. jbang is a new tool that lets you create scripts or simple
applications with Java. I will create a geospatial command line tool using jbang and the Java Topology Suite (JTS).&lt;/p></description></item><item><title>GEOC: A command line interface for GeoTools</title><link>https://jericks.github.io/posts/geoc-cli/</link><pubDate>Sun, 11 Apr 2021 14:46:23 -0700</pubDate><guid>https://jericks.github.io/posts/geoc-cli/</guid><description>The GDAL and OGR libraries are written in C and C++ and have an awesome command line interface (CLI). It is used extensively by GIS analysts and developers.
On the Java side of the fence, GeoTools is an equivalent geospatial library. It contains code for reading and writing vector and raster datasets but it does not have a CLI.
The GEOC project is my attempt to give GeoTools a CLI. It is written in Groovy using GeoScript which wraps GeoTools in a scripting API.</description></item><item><title>Using GEOS and C++ with Conan and CMAKE</title><link>https://jericks.github.io/posts/geos-conan/</link><pubDate>Thu, 25 Mar 2021 20:33:45 -0700</pubDate><guid>https://jericks.github.io/posts/geos-conan/</guid><description>&lt;p>One of the best ways to get started using the GEOS library with C++ is to use Conan and CMAKE.&lt;/p>
&lt;p>&lt;a href="https://trac.osgeo.org/geos">GEOS&lt;/a> is the Geometry Engine, Open Source library written in C and C++. Is is a port of the &lt;a href="https://github.com/locationtech/jts">Java Topology Suite&lt;/a> (JTS). Both libraries include spatial predicate functions and spatials operators. GEOS is used extensively in the PostGIS extension for Postgres.
&lt;a href="https://conan.io/">Conan&lt;/a> is a C/C++ package manager. It allows you to declare what libraries your code depends on.
Finally, &lt;a href="https://cmake.org/">CMake&lt;/a> is one of the most popular ways to build C++ applications.&lt;/p></description></item><item><title>Buffering Features with Groovy</title><link>https://jericks.github.io/posts/geoscript-buffer/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-buffer/</guid><description>&lt;p>In my last post, I calculated centroids from one shapefile and saved them to another using a GeoScript Groovy script. This time I buffer these centroids and save them to a polygon shapefile. Since GeoScript is based on the Java Topology Suite library you can take advantage of any of its geometry operations - intersection, union and difference.&lt;/p></description></item><item><title>Calculating Centroids with GeoScript Groovy</title><link>https://jericks.github.io/posts/geoscript-centroids/</link><pubDate>Sun, 24 Jan 2021 09:05:25 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-centroids/</guid><description>&lt;p>GeoScript uses the GeoTools and Java Topology Suite libraries to provide easy-to-use scripting APIs with implementations in Python, JavaScript, Scala and Groovy. The GeoScript web site provides simple code snippets in all four languages to help you get started. In this post, I address a real world example: calculating centroids from one GIS layer and saving them to another layer using Groovy. This example highlights the GeoScript Layer, Feature, and Geometry modules.&lt;/p></description></item><item><title>Calculating Convex Hull and Minimum Bounding Circle with Groovy</title><link>https://jericks.github.io/posts/geoscript-convexhull/</link><pubDate>Thu, 21 Jan 2021 16:26:56 -0800</pubDate><guid>https://jericks.github.io/posts/geoscript-convexhull/</guid><description>&lt;p>The Java Topology Suite, which Groovy GeoScript wraps, contains spatial operators that act on a group of Features or Geometries. In this post, I collect all geometries from a shapefile to calculate the convex hull and minimum bounding circle. This post builds on previous blog entries where I use GeoScript to extract centroids and buffer Features.&lt;/p></description></item></channel></rss>